model User {
  id                 String        @id @default(uuid())
  firstName          String?       @map("first_name")
  lastName           String?       @map("last_name")
  uniqueName         String?       @unique @map("unique_name")
  avatar             String?       @map("avatar")
  email              String        @unique @map("email")
  walletsGeneratedAt DateTime?     @map("wallets_generated_at") @db.Timestamptz
  kycStatus          KycStatus     @default(NOT_STARTED) @map("kyc_status")
  deletedAt          DateTime?     @map("deleted_at") @db.Timestamptz
  createdAt          DateTime      @default(now()) @map("created_at") @db.Timestamptz
  updatedAt          DateTime      @updatedAt @map("updated_at") @db.Timestamptz
  userAuth           UserAuth?
  profile            UserProfile?
  activityLogs       ActivityLog[]
  wallets            Wallet[]
  transactions       Transaction[]
  sessions           UserSession[]

  @@index([email])
  @@map("users")
}

enum KycStatus {
  NOT_STARTED @map("not_started")
  PENDING     @map("pending")
  COMPLETED   @map("completed")
  FAILED      @map("failed")
}

model UserAuth {
  userId              String            @unique @map("user_id")
  user                User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  isBlocked           Boolean           @default(false) @map("is_blocked")
  hasBiometricEnabled Boolean           @default(false) @map("has_biometric_enabled")
  emailVerifiedAt     DateTime?         @map("email_verified_at") @db.Timestamptz
  createdAt           DateTime          @default(now()) @map("created_at") @db.Timestamptz
  updatedAt           DateTime          @updatedAt @map("updated_at") @db.Timestamptz
  oauthConnections    OAuthConnection[]

  @@index([userId])
  @@map("user_auth")
}

model OAuthConnection {
  id             String   @id() @default(uuid())
  userId         String   @map("user_id")
  provider       String   @map("provider")
  providerUserId String   @map("provider_user_id")
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt      DateTime @updatedAt @map("updated_at") @db.Timestamptz
  user           UserAuth @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("oauth_connections")
}

model UserProfile {
  id             String    @id @default(uuid())
  userId         String    @unique @map("user_id")
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  profilePicture String?   @map("profile_picture")
  bio            String?   @map("bio") @db.Text
  country        String?   @map("country")
  city           String?   @map("city")
  state          String?   @map("state")
  address        String?   @map("address")
  zipCode        String?   @map("zip_code")
  dialingCode    String?   @map("dialing_code")
  phoneNumber    String?   @map("phone_number")
  gender         String?   @map("gender")
  dateOfBirth    DateTime? @map("date_of_birth") @db.Timestamptz
  additionalInfo Json?     @map("additional_info")
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt      DateTime  @updatedAt @map("updated_at") @db.Timestamptz

  @@map("user_profile")
}

model UserSession {
  id                String    @id() @default(uuid())
  userId            String    @map("user_id")
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userAgent         String    @map("user_agent")
  operatingSystem   String    @map("operating_system")
  ipAddress         String    @map("ip_address")
  isActive          Boolean   @default(false)
  deviceVerifiedAt  DateTime? @map("device_verified_at") @db.Timestamptz()
  twofaRequired     Boolean   @default(false) @map("twofa_required")
  twofaVerifiedAt   DateTime? @map("twofa_verified_at") @db.Timestamptz
  deviceFingerprint String    @map("device_fingerprint")
  refreshToken      String?   @map("refresh_token")
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamptz
  lastActiveAt      DateTime  @default(now()) @map("last_active_at") @db.Timestamptz
  revokedAt         DateTime? @map("revoked_at") @db.Timestamptz

  @@unique([userId, deviceFingerprint])
  @@index([userId])
  @@index([userId, isActive])
  @@map("user_sessions")
}

model ActivityLog {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String    @map("user_id")
  action      String    @map("action")
  targetType  String?   @map("target_type")
  targetId    String?   @map("target_id")
  description String?   @map("description")
  metadata    Json?     @map("metadata")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz
  deletedAt   DateTime? @map("deleted_at") @db.Timestamptz

  @@index([createdAt])
  @@index([userId])
  @@index([targetType, targetId])
  @@map("activity_logs")
}
