model User {
  id                 String            @id @default(uuid())
  firstName          String?           @map("first_name")
  lastName           String?           @map("last_name")
  uniqueName         String?           @unique @map("unique_name")
  avatar             String?           @map("avatar")
  email              String            @unique @map("email")
  walletsGeneratedAt DateTime?         @map("wallets_generated_at") @db.Timestamptz
  kycStatus          KycStatus         @default(NOT_STARTED) @map("kyc_status")
  gender             String?           @map("gender")
  dialingCode        String?           @map("dialing_code")
  phoneNumber        String?           @map("phone_number")
  dateOfBirth        DateTime?         @map("date_of_birth") @db.Timestamptz
  additionalInfo     Json?             @map("additional_info")
  deletedAt          DateTime?         @map("deleted_at") @db.Timestamptz
  emailVerifiedAt    DateTime?         @map("email_verified_at") @db.Timestamptz
  createdAt          DateTime          @default(now()) @map("created_at") @db.Timestamptz
  updatedAt          DateTime          @updatedAt @map("updated_at") @db.Timestamptz
  oauthConnections   OAuthConnection[]
  activityLogs       ActivityLog[]
  wallets            Wallet[]
  transactions       Transaction[]
  sessions           UserSession[]
  address            UserAddress?
  cardOrders         CardOrder[]

  @@index([email, uniqueName, phoneNumber, dateOfBirth, gender, dialingCode, kycStatus, walletsGeneratedAt])
  @@map("users")
}

enum KycStatus {
  NOT_STARTED @map("not_started")
  PENDING     @map("pending")
  COMPLETED   @map("completed")
  FAILED      @map("failed")
}

model OAuthConnection {
  id             String   @id() @default(uuid())
  userId         String   @map("user_id")
  provider       String   @map("provider")
  providerUserId String   @map("provider_user_id")
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt      DateTime @updatedAt @map("updated_at") @db.Timestamptz
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider])
  @@index([userId, provider])
  @@index([providerUserId])
  @@map("oauth_connections")
}

model UserAddress {
  id         String   @id @default(uuid())
  userId     String   @unique @map("user_id")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  street     String   @map("street")
  state      String   @map("state")
  city       String   @map("city")
  country    String?  @map("country")
  postalCode String?  @map("postal_code")
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt  DateTime @updatedAt @map("updated_at") @db.Timestamptz

  @@index([userId])
  @@index([country, state, city, postalCode])
  @@map("user_addresses")
}

model UserSession {
  id                String    @id() @default(uuid())
  userId            String    @map("user_id")
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userAgent         String    @map("user_agent")
  operatingSystem   String    @map("operating_system")
  ipAddress         String    @map("ip_address")
  isActive          Boolean   @default(false)
  deviceVerifiedAt  DateTime? @map("device_verified_at") @db.Timestamptz()
  twofaRequired     Boolean   @default(false) @map("twofa_required")
  twofaVerifiedAt   DateTime? @map("twofa_verified_at") @db.Timestamptz
  deviceFingerprint String    @map("device_fingerprint")
  refreshToken      String?   @map("refresh_token")
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamptz
  lastActiveAt      DateTime  @default(now()) @map("last_active_at") @db.Timestamptz
  revokedAt         DateTime? @map("revoked_at") @db.Timestamptz

  @@unique([userId, deviceFingerprint])
  @@index([userId, isActive, deviceFingerprint])
  @@index([userId])
  @@map("user_sessions")
}

model ActivityLog {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String    @map("user_id")
  action      String    @map("action")
  targetType  String?   @map("target_type")
  targetId    String?   @map("target_id")
  description String?   @map("description")
  metadata    Json?     @map("metadata")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz
  deletedAt   DateTime? @map("deleted_at") @db.Timestamptz

  @@index([userId, createdAt])
  @@index([targetType, targetId])
  @@map("activity_logs")
}
