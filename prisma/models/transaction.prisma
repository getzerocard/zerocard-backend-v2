enum EntryType {
  DEBIT  @map("debit")
  CREDIT @map("credit")
}

enum TransactionStatus {
  PENDING   @map("pending")
  COMPLETED @map("completed")
  FAILED    @map("failed")
}

enum TransactionCategory {
  DEPOSIT    @map("deposit")
  WITHDRAWAL @map("withdrawal")
  TRANSFER   @map("transfer")
  FEE        @map("fee")
  REFUND     @map("refund")
}

model Currency {
  id            String   @id @default(uuid())
  code          String   @unique @map("code") // e.g. “NGN”, “USD”, “BTC”
  name          String   @map("name") // e.g. “Nigerian Naira”, “US Dollar”
  decimalPlaces Int      @default(2) @map("decimal_places") // number of decimal places (e.g. 2 for NGN, 8 for BTC)
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime @updatedAt @map("updated_at") @db.Timestamptz
  wallets       Wallet[]

  @@map("currencies")
}

model Wallet {
  id         String             @id @default(uuid())
  identifier String             @unique @map("identifier") // A human-readable identifier, e.g. “User123_USD_Wallet” or SYSTEM_USDT_WALLET
  name       String             @map("name") // e.g. “User 123 USD Wallet”
  currency   Currency           @relation(fields: [currencyId], references: [id], onDelete: Cascade)
  currencyId String             @map("currency_id")
  owner      User?              @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId    String?            @map("owner_id")
  balance    Decimal            @default(0.0) @map("balance")
  createdAt  DateTime           @default(now()) @map("created_at") @db.Timestamptz
  updatedAt  DateTime           @updatedAt @map("updated_at") @db.Timestamptz
  entries    TransactionEntry[]

  @@index([identifier])
  @@index([ownerId])
  @@map("wallets")
}

model Transaction {
  id            String              @id @default(uuid())
  reference     String              @unique @map("reference")
  category      TransactionCategory @default(TRANSFER) @map("category")
  status        TransactionStatus   @default(PENDING) @map("status")
  description   String?             @map("description")
  initiatedBy   User?               @relation(fields: [initiatedById], references: [id], onDelete: Cascade)
  initiatedById String?             @map("initiated_by_id")
  createdAt     DateTime            @default(now()) @map("created_at") @db.Timestamptz
  completedAt   DateTime?           @map("completed_at") @db.Timestamptz
  entries       TransactionEntry[]

  @@index([reference])
  @@index([status])
  @@map("transactions")
}

model TransactionEntry {
  id            String      @id @default(uuid())
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId String      @map("transaction_id")
  wallet        Wallet      @relation(fields: [walletId], references: [id], onDelete: Cascade)
  walletId      String      @map("wallet_id")
  entryType     EntryType   @map("entry_type")
  amount        Decimal     @map("amount")
  memo          String?     @map("memo")
  createdAt     DateTime    @default(now()) @map("created_at") @db.Timestamptz

  @@index([transactionId])
  @@index([walletId])
  @@map("transaction_entries")
}
