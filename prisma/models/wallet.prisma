model Wallet {
  id               String               @id @default(uuid())
  ownerId          String               @map("owner_id")
  owner            User                 @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  chain            WalletChain          @map("chain")
  providerWalletId String               @map("provider_wallet_id")
  address          String               @unique @map("address")
  isActive         Boolean              @default(true) @map("is_active")
  createdAt        DateTime             @default(now()) @map("created_at") @db.Timestamptz
  updatedAt        DateTime             @updatedAt @map("updated_at") @db.Timestamptz
  entries          TransactionEntry[]
  balances         WalletTokenBalance[]

  @@index([ownerId])
  @@index([address])
  @@index([chain])
  @@index([providerWalletId])
  @@map("wallets")
}

enum WalletChain {
  ethereum
  bnb
  polygon
  tron
  base
  arbitrum
  optimism
  solana
  celo
  lisk
}

model WalletTokenBalance {
  id               String   @id @default(uuid())
  walletId         String   @map("wallet_id")
  wallet           Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  tokenId          String   @map("token_id")
  token            Token    @relation(fields: [tokenId], references: [id], onDelete: Cascade)
  ledgerBalance    Decimal  @default(0) @map("ledger_balance") // this is the balance in the ledger
  availableBalance Decimal  @default(0) @map("available_balance") // this is the already swapped balance
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt        DateTime @updatedAt @map("updated_at") @db.Timestamptz

  @@unique([walletId, tokenId])
  @@map("wallet_token_balances")
}
